generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id                  Int            @id @default(autoincrement())
//   firstName           String?
//   lastName            String?
//   email               String         @unique
//   password            String?
//   accountType         String?
//   phoneNumber         String?        @unique
//   isActivated         Boolean        @default(false)
//   twoStepVerification Boolean        @default(false)
//   companyName         String?
//   isDeleted           Boolean        @default(false)
//   companyId           Int?
//   roleId              Int?
//   ethnicity           String?
//   department          String?
//   jobRole             String?
//   DOB                 String?
//   profileImage        String?
//   ageRange            String?
//   lastLogin           DateTime?
//   isEmailVerified     Boolean?       @default(false)
//   status              String?        @default("inactive")
//   gender              String?
//   disability          String?
//   maritalStatus       String?
//   empyloID            String?
//   industry            String?
//   website             String?
//   companyDescription  String?
//   address             String?
//   addressCountry      String?
//   addressCity         String?
//   addressState        String?
//   emailNotification   Boolean?       @default(false)
//   campaignNtification Boolean?       @default(false)
//   termsConditions     Boolean?       @default(false)
//   socialId            String?
//   socialProvider      String?
//   createdAt           DateTime?      @default(now())
//   updatedAt           DateTime?      @updatedAt
//   role                Role?          @relation(fields: [roleId], references: [id])
//   tokenManager        TokenManager[]
//   circles             Circle[]       @relation("CircleMembers")
//   ownedCircles        Circle[]
//   company             User?          @relation("CompanyMembers", fields: [companyId], references: [id])
//   members             User[]         @relation("CompanyMembers")
//   answers             Answer[]
// }

// model Circle {
//   id                Int      @id @default(autoincrement())
//   circleName        String
//   circleDescription String?
//   circleShareLink   String   @unique
//   wellbeingScore    Float?
//   activityLevel     String?
//   circleStatus      String?
//   circleNos         Int?
//   circleImg         String?
//   circleScoreDetail String?
//   circleOwner       User     @relation(fields: [circleOwncerId], references: [id])
//   circleOwncerId    Int
//   members           User[]   @relation("CircleMembers")
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
// }

model User {
  id                  Int            @id @default(autoincrement())
  firstName           String?
  lastName            String?
  email               String         @unique
  password            String?
  accountType         String?
  phoneNumber         String?        @unique
  isActivated         Boolean        @default(false)
  twoStepVerification Boolean        @default(false)
  companyName         String?
  isDeleted           Boolean        @default(false)
  companyId           Int?
  roleId              Int?
  ethnicity           String?
  department          String?
  jobRole             String?
  DOB                 String?
  profileImage        String?
  ageRange            String?
  lastLogin           DateTime?
  isEmailVerified     Boolean?       @default(false)
  status              String?        @default("inactive")
  gender              String?
  disability          String?
  maritalStatus       String?
  empyloID            String?
  industry            String?
  website             String?
  companyDescription  String?
  address             String?
  addressCountry      String?
  addressCity         String?
  addressState        String?
  emailNotification   Boolean?       @default(false)
  campaignNtification Boolean?       @default(false)
  termsConditions     Boolean?       @default(false)
  socialId            String?
  socialProvider      String?
  createdAt           DateTime?      @default(now())
  updatedAt           DateTime?      @updatedAt
  role                Role?          @relation(fields: [roleId], references: [id])
  tokenManager        TokenManager[]
  circles             CircleMember[] @relation("CircleMember")
  ownedCircles        Circle[]       @relation("CircleOwner")
  company             User?          @relation("CompanyMembers", fields: [companyId], references: [id])
  members             User[]         @relation("CompanyMembers")
  answers             Answer[]
}

model Circle {
  id                Int            @id @default(autoincrement())
  circleName        String
  circleDescription String?
  circleShareLink   String         @unique
  wellbeingScore    Float?
  activityLevel     String?
  circleStatus      String?
  circleNos         Int?
  circleImg         String?
  circleScoreDetail String?
  circleOwner       User           @relation("CircleOwner", fields: [circleOwncerId], references: [id])
  circleOwncerId    Int
  members           CircleMember[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model CircleMember {
  user     User      @relation("CircleMember", fields: [userId], references: [id])
  userId   Int
  circle   Circle    @relation(fields: [circleId], references: [id])
  circleId Int
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  @@id([userId, circleId])
}

model TokenManager {
  id            Int       @id @default(autoincrement())
  token         String    @unique
  expiryDate    DateTime
  operationType String
  isUsed        Boolean   @default(false)
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model Modules {
  id                Int           @id @default(autoincrement())
  moduleName        String        @unique
  moduleDescription String
  isDeleted         Boolean       @default(false)
  createdDate       DateTime?
  lastModifiedDate  DateTime?
  permissions       Permissions[]
}

model Permissions {
  id               Int              @id @default(autoincrement())
  permissionTitle  String           @unique
  isDeleted        Boolean          @default(false)
  createdDate      DateTime?
  lastModifiedDate DateTime?
  moduleId         Int?
  modules          Modules?         @relation(fields: [moduleId], references: [id])
  rolePermission   RolePermission[]
}

model Role {
  id               Int              @id @default(autoincrement())
  roleName         String           @unique
  isDeleted        Boolean          @default(false)
  createdDate      DateTime?
  lastModifiedDate DateTime?
  rolePermission   RolePermission[]
  user             User[]

  @@map("Role")
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissions  Permissions @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Assessment {
  id        Int            @id @default(autoincrement())
  type      AssessmentType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  topics    Topic[]
}

model Topic {
  id           Int        @id @default(autoincrement())
  name         String
  assessmentId Int
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  questions    Question[]
}

model Question {
  id      Int      @id @default(autoincrement())
  text    String
  topicId Int
  topic   Topic    @relation(fields: [topicId], references: [id])
  answers Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  text       String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

enum AssessmentType {
  DAILY
  WEEKLY
}
