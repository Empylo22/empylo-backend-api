generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @id @default(autoincrement())
  firstName           String?
  lastName            String?
  email               String    @unique
  password            String?
  accountType         String?
  phoneNumber         String?   @unique
  isActivated         Boolean   @default(false)
  twoStepVerification Boolean   @default(false)
  companyName         String?
  isDeleted           Boolean   @default(false)
  companyId           Int?
  createdDate         DateTime?
  lastModifiedDate    DateTime?
  roleId              Int?
  profileImage        String?

  lastLogin           DateTime?
  isActive            Boolean?  @default(false)
  isEmailVerified     Boolean?  @default(false)
  verificationCode    String?   @unique
  status              String?   @default("inactive")
  gender              String?
  maritalStatus       String?
  empyloID            String?
  passwordResetCode   String?   @unique
  industry            String?
  website             String?
  companyDescription  String?
  address             String?
  addressCity         String?
  addressState        String?
  emailNotification   Boolean?  @default(false)
  campaignNtification Boolean?  @default(false)
  termsConditions     Boolean?  @default(false)
  socialId            String?
  socialProvider      String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  activationToken ActivationToken[]
  otpObject       OtpObject[]
  resetToken      ResetToken[]
  role            Role?             @relation(fields: [roleId], references: [id])
  tokenManager    TokenManager[]
}

model TokenManager {
  id            Int       @id @default(autoincrement())
  token         String    @unique
  expiryDate    DateTime
  operationType String
  isUsed        Boolean   @default(false)
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model ActivationToken {
  id         Int      @id @default(autoincrement())
  token      String
  expiryDate DateTime
  userId     Int?
  user       User?    @relation(fields: [userId], references: [id])
}

model Modules {
  id                Int           @id @default(autoincrement())
  moduleName        String        @unique
  moduleDescription String
  isDeleted         Boolean       @default(false)
  createdDate       DateTime?
  lastModifiedDate  DateTime?
  permissions       Permissions[]
}

model OtpObject {
  id         Int      @id @default(autoincrement())
  expiryDate DateTime
  jwt        String
  otp        String
  isUsed     Boolean  @default(false)
  userId     Int?
  user       User?    @relation(fields: [userId], references: [id])
}

model Permissions {
  id               Int              @id @default(autoincrement())
  permissionTitle  String           @unique
  isDeleted        Boolean          @default(false)
  createdDate      DateTime?
  lastModifiedDate DateTime?
  moduleId         Int?
  modules          Modules?         @relation(fields: [moduleId], references: [id])
  rolePermission   RolePermission[]
}

model ResetToken {
  id         Int      @id @default(autoincrement())
  token      String
  expiryDate DateTime
  userId     Int?
  user       User?    @relation(fields: [userId], references: [id])
}

model Role {
  id               Int              @id @default(autoincrement())
  roleName         String           @unique
  isDeleted        Boolean          @default(false)
  createdDate      DateTime?
  lastModifiedDate DateTime?
  rolePermission   RolePermission[]
  user             User[]

  @@map("Role")
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissions  Permissions @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}
